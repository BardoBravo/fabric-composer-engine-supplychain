'use strict'

// Note: this has been generated by the Yeoman template and ported to ES6

const AdminConnection = require('composer-admin').AdminConnection
const BusinessNetworkConnection = require('composer-client').BusinessNetworkConnection
const { BusinessNetworkDefinition, CertificateUtil, IdCard } = require('composer-common')
const path = require('path')

require('chai').should()

const namespace = 'org.acme.enginesupplychain'
const assetType = 'SampleAsset'

describe('#' + namespace, () => {
    // In-memory card store for testing so cards are not persisted to the file system
    const cardStore = require('composer-common').NetworkCardStoreManager.getCardStore( { type: 'composer-wallet-inmemory' } )
    let adminConnection
    let bnc

    before(async () => {
        // Embedded connection used for local testing
        const connectionProfile = { name: 'embedded', 'x-type': 'embedded' }
        // Generate certificates for use with the embedded connection
        const credentials = CertificateUtil.generate({ commonName: 'admin' })

        // PeerAdmin identity used with the admin connection to deploy business networks
        const deployerMetadata = { version: 1, userName: 'PeerAdmin', roles: [ 'PeerAdmin', 'ChannelAdmin' ] }
        const deployerCard = new IdCard(deployerMetadata, connectionProfile)
        deployerCard.setCredentials(credentials)

        const deployerCardName = 'PeerAdmin'
        adminConnection = new AdminConnection({ cardStore: cardStore })

        await adminConnection.importCard(deployerCardName, deployerCard)
        await adminConnection.connect(deployerCardName)
    })

    beforeEach(async () => {
        bnc = new BusinessNetworkConnection({ cardStore: cardStore })

        const adminUserName = 'admin'
        let adminCardName
        let businessNetworkDefinition = await BusinessNetworkDefinition.fromDirectory(path.resolve(__dirname, '..'))

        // Install the Composer runtime for the new business network
        await adminConnection.install(businessNetworkDefinition)

        // Start the business network and configure an network admin identity
        const startOptions = { networkAdmins: [ { userName: adminUserName, enrollmentSecret: 'adminpw' } ] }
        const adminCards = await adminConnection.start(businessNetworkDefinition.getName(), businessNetworkDefinition.getVersion(), startOptions)

        // Import the network admin identity for us to use
        adminCardName = `${adminUserName}@${businessNetworkDefinition.getName()}`
        await adminConnection.importCard(adminCardName, adminCards.get(adminUserName))

        // Connect to the business network using the network admin identity
        await bnc.connect(adminCardName)
    })

    describe('ChangeAssetValue()', () => {
        it('should change the value property of ' + assetType + ' to newValue', async () => {
            const factory = bnc.getBusinessNetwork().getFactory()

            // Create a user participant
            const user = factory.newResource(namespace, 'User', 'Jonas Verhoelen')

            // Create the asset
            const asset = factory.newResource(namespace, assetType, 'ASSET_001')
            asset.value = 'old-value'

            // Create a transaction to change the asset's value property
            const changeAssetValue = factory.newTransaction(namespace, 'ChangeAssetValue')
            changeAssetValue.relatedAsset = factory.newRelationship(namespace, assetType, asset.$identifier)
            changeAssetValue.newValue = 'new-value'

            const assetRegistry = await bnc.getAssetRegistry(namespace + '.' + assetType)
            await assetRegistry.add(asset)
            const userRegistry = await bnc.getParticipantRegistry(namespace + '.User')
            await userRegistry.add(user)

            await bnc.submitTransaction(changeAssetValue)
            const newAsset = await assetRegistry.get(asset.$identifier)

            newAsset.value.should.equal(changeAssetValue.newValue)
        })
    })
})
